using System.IO;
using UnityEditor;
using UnityEditor.Animations;

public class AnimatorParameterGenerator
{
  private const string GeneratedNamespace = "AnimatorParametersGenerated";
  [MenuItem("Tools/Generate Animator Parameters")]
  public static void Generate()
  {
    string[] guids = AssetDatabase.FindAssets("t:AnimatorController");

    foreach (string guid in guids)
    {
      string path = AssetDatabase.GUIDToAssetPath(guid);
      AnimatorController animatorController = AssetDatabase.LoadAssetAtPath<AnimatorController>(path);

      if (animatorController != null)
      {
        string savePath = Directory.GetParent(path).FullName + "/" + GeneratedNamespace;
        Directory.CreateDirectory(savePath);

        string namespacePath = path.Replace('/', '.') + "." + GeneratedNamespace;
        GenerateParameterClass(animatorController, savePath, namespacePath);
      }
    }

    AssetDatabase.Refresh();
  }

  private static void GenerateParameterClass(AnimatorController animatorController, string savePath, string namespacePath)
  {
    string className = animatorController.name + "Parameters";
    string filePath = Path.Combine(savePath, className + ".cs");

    using (StreamWriter writer = new StreamWriter(filePath))
    {
      writer.WriteLine("// Autogenerated by AnimatorParameterGenerator.cs");
      writer.WriteLine("// DO NOT EDIT");
      writer.WriteLine($"namespace {namespacePath} {{");
      writer.WriteLine("public static class " + className);
      writer.WriteLine("{");

      foreach (var parameter in animatorController.parameters)
      {
        writer.WriteLine($"    public const string {parameter.name} = \"{parameter.name}\";");
      }

      writer.WriteLine("}");
      writer.WriteLine("}");
    }
  }
}
